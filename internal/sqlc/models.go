// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package internal

import (
	"database/sql/driver"
	"fmt"
)

type DeviceTypeStatus string

const (
	DeviceTypeStatusActive   DeviceTypeStatus = "active"
	DeviceTypeStatusInactive DeviceTypeStatus = "inactive"
)

func (e *DeviceTypeStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeviceTypeStatus(s)
	case string:
		*e = DeviceTypeStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeviceTypeStatus: %T", src)
	}
	return nil
}

type NullDeviceTypeStatus struct {
	DeviceTypeStatus DeviceTypeStatus
	Valid            bool // Valid is true if DeviceTypeStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeviceTypeStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeviceTypeStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeviceTypeStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeviceTypeStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeviceTypeStatus), nil
}

type ManufacturerStatus string

const (
	ManufacturerStatusActive   ManufacturerStatus = "active"
	ManufacturerStatusInactive ManufacturerStatus = "inactive"
)

func (e *ManufacturerStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ManufacturerStatus(s)
	case string:
		*e = ManufacturerStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ManufacturerStatus: %T", src)
	}
	return nil
}

type NullManufacturerStatus struct {
	ManufacturerStatus ManufacturerStatus
	Valid              bool // Valid is true if ManufacturerStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullManufacturerStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ManufacturerStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ManufacturerStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullManufacturerStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ManufacturerStatus), nil
}

type DeviceType struct {
	ID     int32
	Name   string
	Status DeviceTypeStatus
}

type Manufacturer struct {
	ID     int32
	Name   string
	Status ManufacturerStatus
}

type SerialNumber struct {
	AutoID         int32
	DeviceTypeID   int32
	ManufacturerID int32
	SerialNumber   string
}
